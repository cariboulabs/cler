name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable debug mode with tmate'
        required: false
        default: false

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  CTEST_PARALLEL_LEVEL: 4
  CTEST_OUTPUT_ON_FAILURE: ON

jobs:
  build-and-test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - name: Ubuntu GCC Debug
            os: ubuntu-latest
            compiler: gcc
            compiler_version: 11
            build_type: Debug
            
          - name: Ubuntu GCC Release
            os: ubuntu-latest
            compiler: gcc
            compiler_version: 11
            build_type: Release
            
          - name: Ubuntu Clang Debug
            os: ubuntu-latest
            compiler: clang
            compiler_version: 14
            build_type: Debug
            
          - name: Ubuntu Clang Release
            os: ubuntu-latest
            compiler: clang
            compiler_version: 14
            build_type: Release
            
          # Windows builds
          - name: Windows MSVC Debug
            os: windows-latest
            compiler: msvc
            build_type: Debug
            
          - name: Windows MSVC Release
            os: windows-latest
            compiler: msvc
            build_type: Release
            
          - name: Windows MinGW Debug
            os: windows-latest
            compiler: mingw
            build_type: Debug
            
          - name: Windows MinGW Release
            os: windows-latest
            compiler: mingw
            build_type: Release
            
          # macOS builds
          - name: macOS Clang Debug
            os: macos-latest
            compiler: clang
            build_type: Debug
            
          - name: macOS Clang Release
            os: macos-latest
            compiler: clang
            build_type: Release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Linux environment
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y gcc-${{ matrix.compiler_version }} g++-${{ matrix.compiler_version }}
          echo "CC=gcc-${{ matrix.compiler_version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.compiler_version }}" >> $GITHUB_ENV
        else
          sudo apt-get install -y clang-${{ matrix.compiler_version }}
          echo "CC=clang-${{ matrix.compiler_version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.compiler_version }}" >> $GITHUB_ENV
        fi
        # Install dependencies for desktop blocks
        sudo apt-get install -y libusb-1.0-0-dev libfftw3-dev
        
    - name: Setup Windows environment
      if: runner.os == 'Windows'
      run: |
        if ("${{ matrix.compiler }}" -eq "mingw") {
          echo "CC=gcc" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "CXX=g++" | Out-File -FilePath $env:GITHUB_ENV -Append
        }
        # Note: Windows builds will use CMake's FetchContent for dependencies
        
    - name: Setup macOS environment
      if: runner.os == 'macOS'
      run: |
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        # Install dependencies
        brew install libusb fftw
        
    - name: Setup debug session
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          build/_deps
          ~/.cache
          ~/Library/Caches
        key: ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-deps-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-deps-
          ${{ runner.os }}-${{ matrix.compiler }}-
          
    - name: Configure CMake
      run: |
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_CXX_STANDARD=17 \
          -DBUILD_TESTS=ON \
          -DBUILD_EXAMPLES=ON \
          -DBUILD_DESKTOP_BLOCKS=ON
          
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}
      
    - name: Run tests
      working-directory: build
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure --parallel
        
    - name: Run specific virtual memory tests
      if: runner.os == 'Windows' || runner.os == 'Linux'
      working-directory: build
      run: ctest --build-config ${{ matrix.build_type }} -R "vmem|doubly_mapped" -V
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.name }}
        path: |
          build/Testing/
          build/**/*_test.xml
          
    - name: Upload build artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ matrix.name }}
        path: |
          build/
          !build/_deps/
          
  performance-tests:
    name: Performance Tests - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup environment
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libusb-1.0-0-dev libfftw3-dev
        # Disable CPU frequency scaling for consistent benchmarks
        echo "performance" | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor || true
        
    - name: Configure CMake
      run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_PERFORMANCE=ON
      
    - name: Build performance tests
      run: cmake --build build --config Release
      
    - name: Run performance tests (Linux)
      if: runner.os == 'Linux'
      run: |
        cd build/performance
        ./perf_simple_linear_flow
        ./perf_fanout_workloads
        ./perf_read_write_techniques
        
    - name: Run performance tests (Windows)
      if: runner.os == 'Windows'
      run: |
        cd build/performance
        ./perf_simple_linear_flow.exe
        ./perf_fanout_workloads.exe
        ./perf_read_write_techniques.exe
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results-${{ matrix.os }}
        path: build/performance/*.txt
        
  all-tests-pass:
    name: All Tests Pass
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.build-and-test.result }}" != "success" ]; then
          echo "Tests failed!"
          exit 1
        fi
        echo "All tests passed!"