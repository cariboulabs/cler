name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable debug mode with tmate'
        required: false
        default: false

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  CTEST_PARALLEL_LEVEL: 4
  CTEST_OUTPUT_ON_FAILURE: ON

jobs:
  # Linux builds using Docker
  linux-docker:
    name: Linux ${{ matrix.compiler }} ${{ matrix.build_type }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and test
      run: |
        docker build \
          -f docker/Dockerfile \
          --target test-runner \
          --build-arg COMPILER=${{ matrix.compiler == 'clang' && 'clang-14' || 'gcc' }} \
          -t cler-test:${{ matrix.compiler }}-${{ matrix.build_type }} \
          .
        
        # Run tests
        docker run --rm \
          -e CMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          cler-test:${{ matrix.compiler }}-${{ matrix.build_type }}
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-linux-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          build/Testing/
          build/**/*_test.xml

  # macOS native builds
  macos-native:
    name: macOS ${{ matrix.build_type }}
    runs-on: macos-latest
    
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        brew install libusb fftw glfw pkg-config
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
    
    - name: Configure CMake
      run: |
        # Help liquid-dsp find FFTW headers and libraries
        FFTW_PREFIX=$(brew --prefix fftw)
        export PKG_CONFIG_PATH="$FFTW_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
        
        # Pass include and library paths to CMake
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCLER_BUILD_TESTS=ON \
          -DCLER_BUILD_EXAMPLES=ON \
          -DCLER_BUILD_BLOCKS=ON \
          -DCLER_BUILD_BLOCKS_GUI=ON \
          -DCLER_BUILD_BLOCKS_LIQUID=ON \
          -DCMAKE_C_FLAGS="-I$FFTW_PREFIX/include" \
          -DCMAKE_CXX_FLAGS="-I$FFTW_PREFIX/include" \
          -DCMAKE_EXE_LINKER_FLAGS="-L$FFTW_PREFIX/lib" \
          -DCMAKE_SHARED_LINKER_FLAGS="-L$FFTW_PREFIX/lib"
    
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}
    
    - name: Run tests
      working-directory: build
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure --parallel
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-macos-${{ matrix.build_type }}
        path: |
          build/Testing/
          build/**/*_test.xml

  # Performance tests on Linux (using Docker for consistency)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build performance image
      run: |
        docker build \
          -f docker/Dockerfile \
          --target gcc-builder \
          -t cler-perf:latest \
          .
    
    - name: Run performance tests
      run: |
        docker run --rm \
          --cpuset-cpus="0" \
          -v $PWD/perf-results:/results \
          cler-perf:latest \
          bash -c "cd build/performance && ./perf_simple_linear_flow && ./perf_fanout_workloads && ./perf_read_write_techniques && cp *.txt /results/" || true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: perf-results/*.txt

  # All tests pass check
  all-tests-pass:
    name: All Tests Pass
    needs: [linux-docker, macos-native]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.linux-docker.result }}" != "success" ] || \
           [ "${{ needs.macos-native.result }}" != "success" ]; then
          echo "Tests failed!"
          exit 1
        fi
        echo "All tests passed!"